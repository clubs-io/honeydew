// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  ext_expires_in    Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?
  image                    String?
  accounts                 Account[]
  sessions                 Session[]
  organization             Organization?             @relation("OrganizationMembers", fields: [organizationId], references: [id])
  organizationId           String?
  role                     UserRole                  @default(MEMBER)
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus StripeSubscriptionStatus?
  paymentRequests          PaymentRequest[]
}

enum StripeSubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

model StripeEvent {
  id               String   @id @unique
  api_version      String?
  data             Json
  request          Json?
  type             String
  object           String
  account          String?
  created          DateTime
  livemode         Boolean
  pending_webhooks Int
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id                   String           @id @default(cuid())
  name                 String
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  users                User[]           @relation("OrganizationMembers")
  invitations          Invitation[]
  stripeOrganizationId String?
  paymentRequest       PaymentRequest[]
}

model Invitation {
  id                   Int                    @id @default(autoincrement())
  email                String
  token                String                 @unique
  organization         Organization           @relation(fields: [organizationId], references: [id])
  organizationId       String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  status               InviteStatus           @default(PENDING)
  invitationEmailSends InvitationEmailSends[]

  @@unique([organizationId, email], name: "emailInviteIdentifier")
}

model PaymentRequest {
  id             String               @id @default(cuid())
  toUser         User                 @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization         @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  amount         Float
  amountPending  Float
  status         PaymentRequestStatus @default(PENDING)
  dueBy          DateTime
}

model InvitationEmailSends {
  id           Int          @id @default(autoincrement())
  email        String
  invitation   Invitation   @relation(fields: [invitationId], references: [id])
  invitationId Int
  emailService String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  status       InviteStatus @default(PENDING)
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
}

enum PaymentRequestStatus {
  COMPLETED
  PENDING
  REJECTED
  OVERDUE
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
